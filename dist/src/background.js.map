{
  "version": 3,
  "sources": ["../../build/background.js"],
  "sourcesContent": ["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n// On install script\r\nchrome.runtime.onInstalled.addListener((details) => {\r\n    // on first time install\r\n    if (details.reason === \"install\") {\r\n        // chrome.tabs.create({\r\n        //   // redir to onboarding url\r\n        //   url: 'http://getreflect.app/onboarding',\r\n        //   active: true,\r\n        // })\r\n    }\r\n    // on version update\r\n    const prevVersion = details.previousVersion;\r\n    const thisVersion = chrome.runtime.getManifest().version;\r\n    if (details.reason === \"update\") {\r\n        if (prevVersion != thisVersion) {\r\n            // chrome.tabs.create({\r\n            //   // redir to latest release patch notes\r\n            //   url: 'http://getreflect.app/latest',\r\n            //   active: true,\r\n            // })\r\n            console.log(`Updated from ${prevVersion} to ${thisVersion}!`);\r\n        }\r\n    }\r\n    // set uninstall url\r\n    // chrome.runtime.setUninstallURL('http://getreflect.app/uninstall')\r\n});\r\n// On Chrome startup, setup extension icons\r\nchrome.runtime.onStartup.addListener(() => __awaiter(this, void 0, void 0, function* () {\r\n    var _a;\r\n    let icon = \"res/icon.png\";\r\n    (_a = chrome.browserAction) === null || _a === void 0 ? void 0 : _a.setIcon({ path: { \"16\": icon } });\r\n}));\r\n// reloads tab that is currently in focus\r\nfunction reloadActive() {\r\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n        const tabsUrl = tabs.map((tab) => tab.url).join(\", \");\r\n        console.log({ cpl: \"CODE0001500\", tabsUrl });\r\n        if (false) {\r\n            chrome.tabs.reload(tabs[0].id);\r\n        }\r\n    });\r\n}\r\n// Listen for new signals from non-background scripts\r\nchrome.runtime.onConnect.addListener((port) => {\r\n    // check comm channel\r\n    switch (port.name) {\r\n        // listens for messages from content scripts\r\n        case \"intentStatus\": {\r\n            port.onMessage.addListener((msg) => intentHandler(port, msg));\r\n        }\r\n    }\r\n});\r\n// handle content script intent submission\r\nfunction intentHandler(port, msg) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // extract intent and url from message\r\n        const intent = msg.intent;\r\n        // get whitelist period\r\n        // const WHITELIST_PERIOD: number = storage.whitelistTime\r\n        // const valid: boolean = true;\r\n        // if (!valid) {\r\n        //   // if invalid, let content script know and early return\r\n        //   port.postMessage({ status: 'invalid' })\r\n        //   console.log('Failed. Remaining on page.')\r\n        //   return\r\n        // }\r\n        // // add whitelist period for site\r\n        // chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n        //   const urls: string[] = tabs.map((x) => x.url)\r\n        //   const domain: string = cleanDomain(urls)\r\n        //   addToWhitelist(domain, WHITELIST_PERIOD)\r\n        // })\r\n        // send status to tab\r\n        // port.postMessage({ status: 'ok' })\r\n        console.log(`Success! Redirecting`);\r\n    });\r\n}\r\n"],
  "mappings": ";;;;;;;;;;AAAA;AAAA,QAAI,YAAa,WAAQ,QAAK,aAAc,SAAU,SAAS,YAAY,GAAG,WAAW;AACrF,qBAAe,OAAO;AAAE,eAAO,iBAAiB,IAAI,QAAQ,IAAI,EAAE,SAAU,SAAS;AAAE,kBAAQ;AAAA;AAAA;AAC/F,aAAO,IAAK,MAAM,KAAI,UAAU,SAAU,SAAS,QAAQ;AACvD,2BAAmB,OAAO;AAAE,cAAI;AAAE,iBAAK,UAAU,KAAK;AAAA,mBAAkB,GAAP;AAAY,mBAAO;AAAA;AAAA;AACpF,0BAAkB,OAAO;AAAE,cAAI;AAAE,iBAAK,UAAU,SAAS;AAAA,mBAAkB,GAAP;AAAY,mBAAO;AAAA;AAAA;AACvF,sBAAc,QAAQ;AAAE,iBAAO,OAAO,QAAQ,OAAO,SAAS,MAAM,OAAO,OAAO,KAAK,WAAW;AAAA;AAClG,aAAM,aAAY,UAAU,MAAM,SAAS,cAAc,KAAK;AAAA;AAAA;AAItE,WAAO,QAAQ,YAAY,YAAY,CAAC,YAAY;AAEhD,UAAI,QAAQ,WAAW,WAAW;AAAA;AAQlC,YAAM,cAAc,QAAQ;AAC5B,YAAM,cAAc,OAAO,QAAQ,cAAc;AACjD,UAAI,QAAQ,WAAW,UAAU;AAC7B,YAAI,eAAe,aAAa;AAM5B,kBAAQ,IAAI,gBAAgB,kBAAkB;AAAA;AAAA;AAAA;AAO1D,WAAO,QAAQ,UAAU,YAAY,MAAM,UAAU,SAAM,QAAQ,QAAQ,aAAa;AACpF,UAAI;AACJ,UAAI,OAAO;AACX,MAAC,MAAK,OAAO,mBAAmB,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ,CAAE,MAAM,CAAE,MAAM;AAAA;AAahG,WAAO,QAAQ,UAAU,YAAY,CAAC,SAAS;AAE3C,cAAQ,KAAK;AAAA,aAEJ,gBAAgB;AACjB,eAAK,UAAU,YAAY,CAAC,QAAQ,cAAc,MAAM;AAAA;AAAA;AAAA;AAKpE,2BAAuB,MAAM,KAAK;AAC9B,aAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAEhD,cAAM,SAAS,IAAI;AAkBnB,gBAAQ,IAAI;AAAA;AAAA;AAAA;",
  "names": []
}
